# ahyes

## Description

---------- DESCRIPTION -----------
Ah Yes, 100 points
(PWN: vos, CRYPTO: hellman)

We trapped our flag in military-grade secure storage!
Thing to look at: http://big.vos.uz/ahyes_bbd593905b57fa1fa72e521955f031a8
Place to rescue from: 11.22.33.44:10120
----------------------------------

Unlike our challenges for first Belluminar, this one is single-stage :( it contains only one flag for full 100 points.

It features a simple AES encryption/decryption service where client can choose encryption strength.
Clients switch between standard AES variants (128 bits key + 10 rounds, 192 bits + 12 rnd, 256 bits + 14 rnd).
Once mode is selected, client can get encrypted flag, encrypt arbitrary data, but not decrypt.

The PWN part is a buffer underflow which sets cipher engine mode to use only 128 bits of the key, but keeps number of rounds intact.
This bug can be used to obtain two ciphertexts: encrypted with 10 rounds of 128 bit AES (standard), and encrypted with 12 rounds of 128 bit AES (using the bug).

CRYPTO part: once you have same text encrypted with 10 rounds and 12 rounds, you can treat it as known-plaintext situation for 2-round AES which is obviously weak.
Using impossible differential cryptanalysis, teams recover the AES key, and decrypt the flag.


Vulnbox with flag: http://big.vos.uz/ahyes_ubuntu.ova
(dhcp, root password is 'toor', service on port 10120)


## Solution: CRYPTO

About masking: the S-box was xored with 0xca, but the key schedule was modified to cancel it. That is, the cipher used is the original AES.

So now we have encryptions with 10 and 12 rounds of AES. Note that the last round of AES does not have MixColumns phase. So the first 9 rounds are identical, and then we have two different paths for 10 and 12 round encryptions:

SB - SubBytes - apply the S-Box to each byte
SR - ShiftRows - row with index y is shifted y positions left
MC - MixColumns - each columns is mixed by applying a linear matrix
AK(r) - AddKey - add subkey #r to state

10 rounds:
[9 rounds] | SB | SR ||| AK(10) -> C10
12 rounds:
[9 rounds] | SB | SR ||| MC | AK(10) | SB | SR | MC | AK(11) | SB | SR | AK(12) -> C12

Let's call a 10 round encryption C10 and a 12 round encryption C12. Then we can apply AK(10) to step back in 10 round ciphertext, so that it becomes a "prefix" in computation of 12 rounds. Thus we obtain a 2-round AES known plaintext pair:

C10 -> AK(10) | MC | AK(10) | SB | SR | MC | AK(11) | SB | SR | AK(12) -> C12

MixColumns and ShiftRows are linear, so we can move AddRoundKey through them (the key being added is changed then).

Moreover, ShiftRows can be swapped with SubBytes, because it's just byte reordering (and all S-Boxes are the same).

Modified AddRoundKeys can be merged together too.

As a result, the chain is equivalent to:

C10 -> MC | SR | AK(?) | SB | MC | AK(11) | SB | AK(?) | SR -> C12

We apply key-independent MC | SR to C10 and SR^-1 to C12:

MC(SR(C10)) -> AK(?) | SB | MC | AK(11) | SB | AK(?) -> SR^-1(C12)

Now there is only one MixColumns, which means that each column is encrypted independently. That is, we have four 32-bit block ciphers. We can recover the key column by column.

First, we collect ~20 pairs (C10, C12). We store MC(SR(C10)) and SR^-1(C12).

Then, we guess the first AK(?) and partially encrypt all texts through AK(?) | SB | MC. Then we have pairs related only by AK(11) | SB | AK(?), which is byte-to-byte encryption: y = SBox[x ^ k1] ^ k2.

Assume we take some such pairs (x1,y1) and (x2,y2). The pair (x1 ^ x2, y1 ^ y2) of input/output differences does not depend on key bytes, it depends only on the S-Box. Also, roughly a half of such differences is impossible. We can precompute all possible differences (2^16 time/memory) and then by checking the input/output differences for all pairs of texts we can discard wrong initial key guesses.

Thus, in about 2^32 operations per column we recover full round key which is a mixed version of K10. We want pure round key, let's get K11. We can partially encrypt all texts and obtain again the byte-to-byte encryptions. Then, we can bruteforce the two round keys K11 and SR(K12) byte by byte (in 2^16 per byte).

Thus we obtain the exact subkey from 11th round. We know can try to reverse the AES key schedule by hand, or better do it using z3. Finally, we obtain a master key. Now we can use any AES implementation to decrypt the flag.
